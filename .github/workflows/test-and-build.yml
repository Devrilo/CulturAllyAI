name: Test and Build

on:
  # Trigger on push to master branch
  push:
    branches:
      - master
  # Allow manual triggering from Actions tab
  workflow_dispatch:

# Cancel in-progress runs for the same workflow on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Lint & Type Check
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

  # Job 2: Unit & Integration Tests with Coverage
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Job 3: E2E Tests
  e2e:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    needs: lint
    # Environment variables are created in .env.test file from secrets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        env:
          PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          PUBLIC_SUPABASE_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
          SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.TEST_OPENROUTER_API_KEY }}
          E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
          E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: test-results/
          retention-days: 7

  # Job 4: Production Build
  build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [test, e2e]
    env:
      # Required for build process (using PUBLIC_SUPABASE_KEY as expected by code)
      PUBLIC_SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
      PUBLIC_SUPABASE_KEY: ${{ secrets.PROD_SUPABASE_ANON_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Job 5: Deployment status summary
  status:
    name: CI/CD Status
    runs-on: ubuntu-latest
    needs: [lint, test, e2e, build]
    if: always()
    steps:
      - name: Check job statuses
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "E2E: ${{ needs.e2e.result }}"
          echo "Build: ${{ needs.build.result }}"
          
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.e2e.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ CI/CD Pipeline failed"
            exit 1
          fi
          echo "✅ CI/CD Pipeline passed"
